File allumettes/Arbitre.java: 667 tokens, 156 lines (not NL-terminated)
File allumettes/JeuSimple.java: 113 tokens, 38 lines (not NL-terminated)
File allumettes/CoupInvalideException.java: 68 tokens, 39 lines
File allumettes/Joueur.java: 77 tokens, 49 lines (not NL-terminated)
File allumettes/OperationInterditeException.java: 21 tokens, 16 lines (not NL-terminated)
File allumettes/StrategieHumain.java: 164 tokens, 52 lines (not NL-terminated)
File allumettes/StrategieRapide.java: 35 tokens, 13 lines (not NL-terminated)
File allumettes/ConfigurationException.java: 21 tokens, 16 lines
File allumettes/Jouer.java: 650 tokens, 178 lines
File allumettes/Jeu.java: 23 tokens, 21 lines
File allumettes/StrategieSuperTricheur.java: 145 tokens, 41 lines (not NL-terminated)
File allumettes/StrategieExpert.java: 81 tokens, 30 lines (not NL-terminated)
File allumettes/Procuration.java: 59 tokens, 30 lines (not NL-terminated)
File allumettes/StrategieNaif.java: 68 tokens, 27 lines (not NL-terminated)
File allumettes/Strategie.java: 13 tokens, 15 lines (not NL-terminated)
File allumettes/StrategieTricheur.java: 110 tokens, 36 lines (not NL-terminated)
File allumettes/StrategieSwing.java: 1098 tokens, 287 lines (not NL-terminated)
Total input: 17 files (17 new, 0 old), 3413 tokens

allumettes/StrategieSwing.java: line 112-123 [46]
allumettes/StrategieSwing.java: line 126-137
<         fenetre.add(panel);
<         
<         bouton1.addActionListener(new ActionListener() {
<             @Override
<             public void actionPerformed(ActionEvent e) {
<                 faireChoix(1);
<             }
<         });
<         
<         bouton2.addActionListener(new ActionListener() {
<             @Override
<             public void actionPerformed(ActionEvent e) {
---
>         });
>         
>         bouton3.addActionListener(new ActionListener() {
>             @Override
>             public void actionPerformed(ActionEvent e) {
>                 faireChoix(3);
>             }
>         });
>         
>         boutonTricher.addActionListener(new ActionListener() {
>             @Override
>             public void actionPerformed(ActionEvent e) {

allumettes/Arbitre.java: line 71-76 [45]
allumettes/Arbitre.java: line 79-83
<             ecrireXML("vainqueur", gagnant.getNom());
<             this.xmlWriter.write("</partie>\n");
<             this.xmlWriter.close();
<             
<         } catch (OperationInterditeException e) {
<             System.out.println("Abandon de la partie car " + joueurCourant.getNom() + " triche !");
---
>                 ecrireXML("tricheur", joueurCourant.getNom());
>                 this.xmlWriter.write("</partie>\n");
>                 this.xmlWriter.close();
>             } catch (IOException ex) {
>                 System.err.println("Erreur lors de l'écriture du fichier XML : " + ex.getMessage());

allumettes/StrategieSuperTricheur.java: line 1-15 [28]
allumettes/StrategieTricheur.java: line 1-12
< package allumettes;
< 
< import java.lang.reflect.Field;
< 
< /**
<  * Stratégie de jeu qui permet de tricher même en mode non confiant.
<  * Cette stratégie utilise la réflexion Java pour accéder aux champs privés.
<  */
< public class StrategieSuperTricheur implements Strategie {
< 
<     @Override
<     public int getPrise(Jeu jeu) {
<         System.out.println("[Je super triche...]");
<         
<         try {
---
> package allumettes;
> 
> /**
>  * Stratégie de jeu qui consiste à tricher en modifiant directement le jeu.
>  */
> public class StrategieTricheur implements Strategie {
> 
>     @Override
>     public int getPrise(Jeu jeu) {
>         System.out.println("[Je triche...]");
>         
>         try {

allumettes/StrategieSwing.java: line 124-130 [26]
allumettes/StrategieSwing.java: line 131-137
<                 faireChoix(2);
<             }
<         });
<         
<         bouton3.addActionListener(new ActionListener() {
<             @Override
<             public void actionPerformed(ActionEvent e) {
---
>                 faireChoix(3);
>             }
>         });
>         
>         boutonTricher.addActionListener(new ActionListener() {
>             @Override
>             public void actionPerformed(ActionEvent e) {

allumettes/StrategieSwing.java: line 99-103 [24]
allumettes/StrategieSwing.java: line 104-108
<         panel.add(panneauTriche, c);
<         
<         c.gridy = 1;
<         c.weightx = 1.0;
<         c.weighty = 1.0;
---
>         panel.add(labelAllumettes, c);
>         
>         c.gridy = 2;
>         c.weightx = 1.0;
>         c.weighty = 0;

allumettes/Jouer.java: line 141-147 [24]
allumettes/Jouer.java: line 147-153
< 				return new StrategieHumain(scanner);
< 			case "naif":
< 				return new StrategieNaif();
< 			case "rapide":
< 				return new StrategieRapide();
< 			case "expert":
< 				return new StrategieExpert();
---
> 				return new StrategieExpert();
> 			case "tricheur":
> 				return new StrategieTricheur();
> 			case "swing":
> 				return new StrategieSwing();
> 			case "supertricheur":
> 				return new StrategieSuperTricheur();

allumettes/StrategieSuperTricheur.java: line 17-19 [24]
allumettes/StrategieSuperTricheur.java: line 25-27
<             if (jeu instanceof Procuration) {
<                 Field champJeuReel = Procuration.class.getDeclaredField("jeuReel");
<                 champJeuReel.setAccessible(true);
---
>             if (jeuReel instanceof JeuSimple) {
>                 Field champNbAllumettes = JeuSimple.class.getDeclaredField("nbAllumettes");
>                 champNbAllumettes.setAccessible(true);

allumettes/Arbitre.java: line 103-104 [24]
allumettes/StrategieHumain.java: line 31-32
<                 if (joueur.getNom().toLowerCase().contains("humain")) {
<                     System.out.print(joueur.getNom() + ", combien d'allumettes ? ");
---
>                 if (entree.trim().toLowerCase().equals("triche")) {
>                     System.out.println("[Une allumette en moins, plus que " + 

allumettes/Jouer.java: line 164-167 [24]
allumettes/Jouer.java: line 168-171
< 			java.io.FileWriter dtdWriter = new java.io.FileWriter("deroulement.dtd");
< 			dtdWriter.write("<!ELEMENT partie (coup*, vainqueur?, tricheur?)>\n");
< 			dtdWriter.write("<!ELEMENT coup (joueur, prise)>\n");
< 			dtdWriter.write("<!ATTLIST coup numero CDATA #REQUIRED>\n");
---
> 			dtdWriter.write("<!ELEMENT joueur (#PCDATA)>\n");
> 			dtdWriter.write("<!ELEMENT prise (#PCDATA)>\n");
> 			dtdWriter.write("<!ELEMENT vainqueur (#PCDATA)>\n");
> 			dtdWriter.write("<!ELEMENT tricheur (#PCDATA)>\n");

allumettes/Arbitre.java: line 42-46 [24]
allumettes/Arbitre.java: line 81-85
<             this.xmlWriter.write("<partie>\n");
<         } catch (IOException e) {
<             System.err.println("Erreur lors de la création du fichier XML : " + e.getMessage());
<         }
<     }
---
>                 this.xmlWriter.close();
>             } catch (IOException ex) {
>                 System.err.println("Erreur lors de l'écriture du fichier XML : " + ex.getMessage());
>             }
>         } catch (IOException e) {

