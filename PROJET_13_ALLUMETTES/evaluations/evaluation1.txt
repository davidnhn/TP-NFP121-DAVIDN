Date de l'évaluation : ven. 04 juil. 2025 22:41:21 CEST

LISEZ-MOI.txt : SUPPRIMÉ

Nombre de similitudes : 12	(voir evaluation1/sim_java.txt)
Les similitudes indiquent généralement du code à restructurer.

Erreurs checkstyle (différentes/types) : 30/7	(voir evaluation1//checkstyle.txt)

Classe OperationInterditeException : OperationInterditeException (ok)

Procuration sur le jeu réel : allumettes/Procuration.java (ok)

OperationInterditeException, levée dans : allumettes/Procuration.java (ok)
OperationInterditeException : Pourquoi la récupérer dans plusieurs classes ?
  | allumettes/Arbitre.java:84:        } catch (OperationInterditeException e) {
  | allumettes/StrategieSwing.java:274:                    } catch (OperationInterditeException e) {
  | allumettes/StrategieTricheur.java:29:        } catch (OperationInterditeException e) {
  | allumettes/StrategieHumain.java:37:                    } catch (CoupInvalideException | OperationInterditeException e) {


Throwable, Exception et RuntimeException ne devraient pas être récupérées car trop générales... ok

AssertionError ne doit pas être récupérée... ok

Autres exceptions récupérées :
  | allumettes/StrategieSuperTricheur.java:34:        } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException | SecurityException | ClassCastException e) {
  | allumettes/Arbitre.java:52:        } catch (IOException e) {
  | allumettes/Arbitre.java:91:            } catch (IOException ex) {
  | allumettes/Arbitre.java:94:        } catch (IOException e) {
  | allumettes/Arbitre.java:129:            } catch (CoupInvalideException e) {
  | allumettes/StrategieSwing.java:141:                } catch (NumberFormatException ex) {
  | allumettes/StrategieSwing.java:233:                } catch (InterruptedException e) {
  | allumettes/StrategieSwing.java:263:                        } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException | SecurityException | ClassCastException e) {
  | allumettes/StrategieSwing.java:272:                    } catch (CoupInvalideException e) {
  | allumettes/StrategieSwing.java:280:            } catch (NumberFormatException e) {
  | allumettes/StrategieTricheur.java:28:        } catch (CoupInvalideException e) {
  | allumettes/Jouer.java:69:               } catch (InterruptedException e) {
  | allumettes/Jouer.java:73:       } catch (ConfigurationException e) {
  | allumettes/Jouer.java:185:      } catch (java.io.IOException e) {
  | allumettes/StrategieHumain.java:44:            } catch (NumberFormatException e) {

Utilisation de 'Scanner' : ok
  | allumettes/Jouer.java:43:           Scanner scanner = new Scanner(System.in);
  | allumettes/Jouer.java:122:  private static Joueur creerJoueur(String parametreJoueur, Scanner scanner) {
  | allumettes/Jouer.java:150:  private static Strategie creerStrategie(String nomStrategie, Scanner scanner) {
  | allumettes/StrategieHumain.java:10:    private static Scanner scanner;
  | allumettes/StrategieHumain.java:16:    public StrategieHumain(Scanner scanner) {

Utilisation de 'split' : ok
  | allumettes/Jouer.java:123:      String[] parties = parametreJoueur.split("@");

Utilisation de 'Random' : ok
  | allumettes/StrategieNaif.java:3:import java.util.Random;
  | allumettes/StrategieNaif.java:10:    private final Random random;
  | allumettes/StrategieNaif.java:16:        this.random = new Random();

Utilisation de '3' : Ne pas utiliser de constante littérale hors -1, 0 ou 1 (peut-être PRISE_MAX ?)
  |     allumettes/StrategieSwing.java:81:        JPanel panneauBoutons = new JPanel(new GridLayout(1, 3, 5, 0));
  |     allumettes/StrategieSwing.java:84:        bouton3 = new JButton("3");
  |     allumettes/StrategieSwing.java:131:                faireChoix(3);
  |     allumettes/StrategieSwing.java:160:        bouton3.setEnabled(nbAllumettes >= 3);

Affichage de 'Impossible !' : ok

Utilisation de 'System.exit' : ok

Compilation de Jouer.java : OK.
Compilation de Arbitre.java : OK.
Compilation de StrategieRapideTest.java : OK.
Test exemplePresqueSujet : ok
Test exempleTricheurSujet : ok
Test exempleConfiantTricheurSujet : ok
Test exempleRobustesse : ok
Test exempleHumainTricheurExpert : ok
Test exempleMaxLou : ok
Test exempleRapideRapide : ok
Test exempleTricheurExpert : ok

Test RobustesseTest : OK (25 tests)	(voir evaluation1/RobustesseTest.txt)

On recommence avec les classes/interfaces fournies : Jeu ConfigurationException CoupInvalideException
Test exemplePresqueSujet : ok

Vérification du respect du diagramme de classe...
Test FormeC7Test : OK (1 test)	(voir evaluation1/FormeC7Test.txt)
Test FormeC9Test : OK (1 test)	(voir evaluation1/FormeC9Test.txt)
Test FormeC14Test : OK (1 test)	(voir evaluation1/FormeC14Test.txt)
Test FormeExceptionsTest : OK (1 test)	(voir evaluation1/FormeExceptionsTest.txt)
Test FormeProxyTest : OK (2 tests)	(voir evaluation1/FormeProxyTest.txt)

Compilation de StrategieRapideTest.java : OK.
Test allumettes.StrategieRapideTest : OK (1 test)	(voir evaluation1/allumettes.StrategieRapideTest.txt)
Tous les tests réussissent
